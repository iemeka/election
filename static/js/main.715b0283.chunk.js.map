{"version":3,"sources":["baseurl.js","CreateNew.js","Lga.js","PollingUnit.js","App.js","index.js"],"names":["baseurl","CreateNew","useState","allLga","setAllLga","allWards","setWards","msg","setMsg","puName","setpuName","partyResults","setPartyResults","partyAbb","setPartyAbb","partyScore","setPartyScore","postLgaId","setPostLgaId","postWardId","setPostWardId","useEffect","Axios","get","then","response","data","createNewUnit","trim","length","post","wardId","Number","lgaId","pollingUnitName","console","log","className","onSubmit","e","preventDefault","style","display","htmlFor","onChange","target","value","name","id","map","item","lga_id","lga_name","onClick","i","ward_id","ward_name","type","abbr","score","isNaN","Lga","oneLga","setOneLga","setLgaId","idx","Object","keys","PollingUnit","allPollingUnits","setAllPollingUnits","onePollingUnit","setOnePollingUnit","unitId","setUnitId","rows","polling_unit_name","uniqueid","party_abbreviation","party_score","App","content","setContent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.715b0283.chunk.js","sourcesContent":["export const baseurl = \"https://learntnode.herokuapp.com/\";\n\n//local\n// export const baseurl = \"http://localhost:4000/\";\n\n","import { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport \"./CreateNew.css\";\nimport { baseurl } from \"./baseurl\";\n\nexport default function CreateNew() {\n  const [allLga, setAllLga] = useState([]);\n  const [allWards, setWards] = useState([]);\n  const [msg, setMsg] = useState(\"\");\n  const [puName, setpuName] = useState(\"\");\n  const [partyResults, setPartyResults] = useState([]);\n  const [partyAbb, setPartyAbb] = useState(\"\");\n  const [partyScore, setPartyScore] = useState(\"\");\n  const [postLgaId, setPostLgaId] = useState(0);\n  const [postWardId, setPostWardId] = useState(0);\n\n  const savePary = () => {\n    if (\n      partyScore.length === 0 ||\n      partyAbb.length === 0 ||\n      partyAbb.length > 4 ||\n      isNaN(Number(partyScore))\n    )\n      return;\n    setPartyResults([\n      ...partyResults,\n      { abbr: partyAbb, score: Number(partyScore) },\n    ]);\n    setPartyAbb(\"\");\n    setPartyScore(\"\");\n  };\n\n  useEffect(() => {\n    Axios.get(baseurl + \"lga\").then((response) => {\n      setAllLga(response.data);\n    });\n    Axios.get(baseurl + \"ward\").then((response) => {\n      setWards(response.data);\n    });\n  }, []);\n\n  const validInputs = () => {\n    if (puName.trim().length === 0 || partyResults.length === 0) {\n      setMsg(\n        \"Invalid Input. Please enter valid values in all text box. Note that party abbrevition should contain a maximum of 4 characters\"\n      );\n      return false;\n    }\n    setMsg(\"\");\n    return true;\n  };\n\n  const createNewUnit = () => {\n    if (validInputs()) {\n      Axios.post(baseurl + `new_polling_unit`, {\n        wardId: Number(postWardId),\n        lgaId: Number(postLgaId),\n        pollingUnitName: puName,\n        partyResults: partyResults,\n      }).then((response) => {\n        console.log(response);\n        setMsg(\"New Polling Unit added Successfully!\");\n        setPartyResults([]);\n        setpuName(\"\");\n      });\n    }\n  };\n\n  return (\n    <form\n      className=\"main-content\"\n      onSubmit={(e) => {\n        e.preventDefault();\n      }}\n    >\n      <div className=\"title\">\n        <h3>create polling unit</h3>\n      </div>\n      <div className=\"form-content\">\n        <div\n          className=\"msg\"\n          style={{ display: msg.trim().length === 0 ? \"none\" : \"block\" }}\n        >\n          {msg}\n        </div>\n        <div className=\"select-lga\">\n          <label htmlFor=\"lga\">Select Local Government</label>\n          <select\n            onChange={(e) => setPostLgaId(e.target.value)}\n            name=\"lga\"\n            id=\"lga\"\n            className=\"first-three\"\n          >\n            {allLga.map((item) => (\n              <option key={item.lga_id} value={item.lga_id}>\n                {item.lga_name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"select-ward\">\n          <label htmlFor=\"ward\">Select Ward</label>\n          <select\n            onClick={(e) => setPostWardId(e.target.value)}\n            name=\"ward\"\n            className=\"first-three\"\n            id=\"ward\"\n          >\n            {allWards.map((item, i) => (\n              <option key={i} value={item.ward_id}>\n                {item.ward_name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"unit-name\">\n          <label>Polling unit name</label>\n          <input\n            type=\"text\"\n            value={puName}\n            className=\"first-three\"\n            onChange={(e) => setpuName(e.target.value)}\n          />\n        </div>\n        <div className=\"party-box\">\n          <label>Parties:</label>\n          {partyResults.map((item, i) => (\n            <p key={i}>\n              <span>{item.abbr}</span> <span>{item.score}</span>\n            </p>\n          ))}\n        </div>\n        <div className=\"party-detail\">\n          <label>abbrevition</label>\n          <input\n            type=\"text\"\n            value={partyAbb}\n            onChange={(e) => {\n              setPartyAbb(e.target.value);\n            }}\n          />\n        </div>\n        <div className=\"party-detail\">\n          <label>score</label>\n          <input\n            type=\"text\"\n            value={partyScore}\n            onChange={(e) => {\n              setPartyScore(e.target.value);\n            }}\n          />\n        </div>\n        <div className=\"add-party\">\n          <button onClick={() => savePary()}>add party</button>\n        </div>\n      </div>\n      <div className=\"submit\">\n        <button onClick={() => createNewUnit()}>Create</button>\n      </div>\n    </form>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { baseurl } from \"./baseurl\";\nimport Axios from \"axios\";\n\nexport default function Lga() {\n  const [allLga, setAllLga] = useState([]);\n  const [oneLga, setOneLga] = useState([]);\n  const [lgaId, setLgaId] = useState(null);\n\n  const getTotalResult = (idx) => {\n    Axios.get(baseurl + `lga/polling_units/${idx}`).then((response) => {\n      console.log(response.data);\n      setOneLga(response.data);\n      setLgaId(idx);\n    });\n  };\n  useEffect(() => {\n    Axios.get(baseurl + \"lga\").then((response) => {\n      setAllLga(response.data);\n    });\n  }, []);\n  return (\n    <div className=\"main-content\">\n      <div className=\"title\">\n        <h3>local government Result</h3>\n      </div>\n      {allLga.length === 0 ? (\n        <span>Loading...</span>\n      ) : (\n        allLga.map((item) => (\n          <div key={item.lga_id} className=\"list-item\">\n            <p onClick={() => getTotalResult(item.lga_id)}>\n              {item.lga_name} <button>view result</button>\n            </p>\n            <div className=\"sub-list\"\n              style={{\n                display: lgaId === item.lga_id ? \"block\" : \"none\",\n              }}\n            >\n              {Object.keys(oneLga).length !== 0\n                ? Object.keys(oneLga).map((item) => (\n                    <p>\n                      <span>{item}</span> <span>{oneLga[item]}</span>\n                    </p>\n                  ))\n                : <div className=\"no-data\">No data</div> }\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport { baseurl } from \"./baseurl\";\n\nexport default function PollingUnit() {\n  const [allPollingUnits, setAllPollingUnits] = useState([]);\n\n  const [onePollingUnit, setOnePollingUnit] = useState([]);\n  const [unitId, setUnitId] = useState(null);\n\n  const getParties = (idx) => {\n    Axios.get(baseurl+`polling_units/polling_unit/${idx}`).then(\n      (response) => {\n        console.log(response.data);\n        setOnePollingUnit(response.data);\n        setUnitId(idx);\n      }\n    );\n  };\n\n  useEffect(() => {\n    Axios.get(baseurl+\"polling_units\").then((response) => {\n      setAllPollingUnits(response.data.rows);\n    });\n\n  }, []);\n\n  return (\n    <div className=\"main-content\">\n      <div className=\"title\">\n        <h3>Polling Unit Result</h3>\n      </div>\n      {allPollingUnits.length === 0 ? <span>Loading...</span> : allPollingUnits.map((item) => (\n         item.polling_unit_name && item.polling_unit_name.trim().length === 0 ? null :\n        <div key={item.uniqueid} className=\"list-item\">\n          <p onClick={() => getParties(item.uniqueid)}>\n            {item.polling_unit_name}\n            <button>view result</button>\n          </p>\n          <div\n            className=\"sub-list\"\n            style={{\n              display: unitId === item.uniqueid ? \"block\" : \"none\",\n            }}\n          >\n            {Object.keys(onePollingUnit).length === 0 ? <div className=\"no-data\">No data</div> : onePollingUnit.map((item, i) => (\n             \n              <p key={i}>\n                <span>{item.party_abbreviation}</span>{\" \"}\n                <span>{item.party_score}</span>\n              </p>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport CreateNew from \"./CreateNew\";\nimport Lga from \"./Lga\";\nimport PollingUnit from \"./PollingUnit\";\n\nfunction App() {\n  const [content, setContent] = useState(<PollingUnit />);\n  return (\n    <div className=\"container\">\n      <div className=\"nav\">\n        <button onClick={() => setContent(<PollingUnit />)}>\n          polling unit result\n        </button>\n        <button onClick={() => setContent(<Lga />)}>local government result</button>\n        <button onClick={() => setContent(<CreateNew />)}>\n          create polling unit\n        </button>\n      </div>\n      <div className=\"content\">{content}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}