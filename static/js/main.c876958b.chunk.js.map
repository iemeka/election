{"version":3,"sources":["baseurl.js","CreateNew.js","Lga.js","PollingUnit.js","App.js","index.js"],"names":["baseurl","CreateNew","useState","allLga","setAllLga","allWards","setWards","errMsg","setErrorMsg","puName","setpuName","partyResults","setPartyResults","partyAbb","setPartyAbb","partyScore","setPartyScore","postLgaId","setPostLgaId","postWardId","setPostWardId","useEffect","Axios","get","then","response","data","createNewUnit","trim","length","post","wardId","Number","lgaId","pollingUnitName","console","log","className","htmlFor","onChange","e","target","value","name","id","map","item","lga_id","lga_name","onClick","i","ward_id","ward_name","type","abbr","score","isNaN","Lga","oneLga","setOneLga","setLgaId","idx","style","height","background","display","Object","keys","PollingUnit","allPollingUnits","setAllPollingUnits","onePollingUnit","setOnePollingUnit","unitId","setUnitId","rows","uniqueid","polling_unit_name","party_abbreviation","party_score","App","content","setContent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c876958b.chunk.js","sourcesContent":["export const baseurl = \"https://learntnode.herokuapp.com/\";\n","import react, { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport \"./CreateNew.css\";\nimport { baseurl } from \"./baseurl\";\n\nexport default function CreateNew() {\n  const [allLga, setAllLga] = useState([]);\n  const [allWards, setWards] = useState([]);\n  const [errMsg, setErrorMsg] = useState(\"\");\n  const [puName, setpuName] = useState(\"\");\n  const [partyResults, setPartyResults] = useState([]);\n  const [partyAbb, setPartyAbb] = useState(\"\");\n  const [partyScore, setPartyScore] = useState(\"\");\n  const [postLgaId, setPostLgaId] = useState(0);\n  const [postWardId, setPostWardId] = useState(0);\n\n  const savePary = () => {\n    // party max lenght is 4 else data base returns error.\n    if (\n      partyScore.length === 0 ||\n      partyAbb.length === 0 ||\n      partyAbb.length > 4 ||\n      isNaN(Number(partyScore))\n    )\n      return;\n    setPartyResults([\n      ...partyResults,\n      { abbr: partyAbb, score: Number(partyScore) },\n    ]);\n    setPartyAbb(\"\");\n    setPartyScore(\"\");\n  };\n\n  useEffect(() => {\n    Axios.get(baseurl + \"lga\").then((response) => {\n      setAllLga(response.data);\n    });\n    Axios.get(baseurl + \"ward\").then((response) => {\n      setWards(response.data);\n    });\n  }, []);\n\n  const validInputs = () => {\n    if (puName.trim().length === 0 || partyResults.length === 0) {\n      setErrorMsg(\n        \"Invalid Input. Please enter valid values in all text box. Note that party abbrevition should contain a maximum of 4 characters\"\n      );\n      return false;\n    }\n    setErrorMsg(\"\");\n    return true;\n  };\n\n  const createNewUnit = () => {\n    if (validInputs()) {\n      Axios.post(baseurl + `new_polling_unit`, {\n        wardId: Number(postWardId),\n        lgaId: Number(postLgaId),\n        pollingUnitName: puName,\n        partyResults: partyResults,\n      }).then((response) => {\n        console.log(response);\n        setErrorMsg(\"New Polling Unit added Successfully!\");\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"new-unit\">\n        <div>{errMsg}</div>\n        <div>\n          <label htmlFor=\"lga\">Select Local Government</label>\n          <select\n            onChange={(e) => setPostLgaId(e.target.value)}\n            name=\"lga\"\n            id=\"lga\"\n          >\n            {allLga.map((item) => (\n              <option key={item.lga_id} value={item.lga_id}>\n                {item.lga_name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <label htmlFor=\"ward\">Select Ward</label>\n          <select\n            onClick={(e) => setPostWardId(e.target.value)}\n            name=\"ward\"\n            id=\"ward\"\n          >\n            {allWards.map((item, i) => (\n              <option key={i} value={item.ward_id}>\n                {item.ward_name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div>\n          Polling unit name\n          <input type=\"text\" onChange={(e) => setpuName(e.target.value)} />\n        </div>\n        <div>\n          <div className=\"party-box\">\n            <span>added Parties</span>\n            {partyResults.map((item, i) => (\n              <p key={i}>\n                {item.abbr}-{item.score}\n              </p>\n            ))}\n          </div>\n          name\n          <input\n            type=\"text\"\n            value={partyAbb}\n            onChange={(e) => {\n              setPartyAbb(e.target.value);\n            }}\n          />\n          score\n          <input\n            type=\"text\"\n            value={partyScore}\n            onChange={(e) => {\n              setPartyScore(e.target.value);\n            }}\n          />\n          <button onClick={() => savePary()}>add party</button>\n        </div>\n        <button onClick={() => createNewUnit()}>Create</button>\n      </div>\n    </div>\n  );\n}\n","import react, { useEffect, useState } from \"react\";\nimport { baseurl } from \"./baseurl\";\nimport \"./Lga.css\";\nimport Axios from \"axios\";\n\nexport default function Lga() {\n  const [allLga, setAllLga] = useState([]);\n  const [oneLga, setOneLga] = useState([]);\n  const [lgaId, setLgaId] = useState(null);\n\n  const getTotalResult = (idx) => {\n    Axios.get(baseurl + `lga/polling_units/${idx}`).then((response) => {\n      console.log(response.data);\n      setOneLga(response.data);\n      setLgaId(idx);\n    });\n  };\n  useEffect(() => {\n    Axios.get(baseurl + \"lga\").then((response) => {\n      setAllLga(response.data);\n    });\n  }, []);\n  return (\n    <div className=\"allLga\">\n      {allLga.length === 0\n        ? \"Loading...\"\n        : allLga.map((item) => (\n            <div key={item.lga_id}>\n              <p onClick={() => getTotalResult(item.lga_id)}>{item.lga_name}</p>\n              <div\n                style={{\n                  height: \"auto\",\n                  background: \"lightgrey\",\n                  display: lgaId === item.lga_id ? \"block\" : \"none\",\n                }}\n              >\n                {Object.keys(oneLga).length !== 0\n                  ? Object.keys(oneLga).map((item) => (\n                      <p>\n                        <span>{item}</span> <span>{oneLga[item]}</span>\n                      </p>\n                    ))\n                  : \"No Data\"}\n              </div>\n            </div>\n          ))}\n    </div>\n  );\n}\n","import react, { useEffect, useState } from \"react\";\nimport \"./PollingUnits.css\";\nimport Axios from \"axios\";\nimport { baseurl } from \"./baseurl\";\n\nexport default function PollingUnit() {\n  const [allPollingUnits, setAllPollingUnits] = useState([]);\n\n  const [onePollingUnit, setOnePollingUnit] = useState([]);\n  const [unitId, setUnitId] = useState(null);\n\n  const getParties = (idx) => {\n    Axios.get(baseurl+`polling_units/polling_unit/${idx}`).then(\n      (response) => {\n        console.log(response.data);\n        setOnePollingUnit(response.data);\n        setUnitId(idx);\n      }\n    );\n  };\n\n  useEffect(() => {\n    Axios.get(baseurl+\"polling_units\").then((response) => {\n      setAllPollingUnits(response.data.rows);\n    });\n\n  }, []);\n\n  return (\n    <div className=\"allPollingUnits\">\n      {allPollingUnits.length === 0 ? \"Loading...\" : allPollingUnits.map((item) => (\n        <div key={item.uniqueid}>\n          <p onClick={() => getParties(item.uniqueid)}>\n            {item.polling_unit_name}\n          </p>\n          <div\n            className=\"parties\"\n            style={{\n              height: \"auto\",\n              background: \"lightgrey\",\n              display: unitId === item.uniqueid ? \"block\" : \"none\",\n            }}\n          >\n            {Object.keys(onePollingUnit).length === 0 ? \"No data\" :onePollingUnit.map((item) => (\n              <p>\n                <span>{item.party_abbreviation}</span>{\" \"}\n                <span>{item.party_score}</span>\n              </p>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport CreateNew from \"./CreateNew\";\nimport Lga from \"./Lga\";\nimport PollingUnit from \"./PollingUnit\";\n\nfunction App() {\n  const [content, setContent] = useState(null);\n  return (\n    <div className=\"container\">\n      <div>\n        <button onClick={() => setContent(<PollingUnit />)}>\n          polling unit result\n        </button>\n        <button onClick={() => setContent(<Lga />)}>government result</button>\n        <button onClick={() => setContent(<CreateNew />)}>\n          create polling unit\n        </button>\n      </div>\n      <div>{content}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}