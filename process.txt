npm init  - to create node app.
npm install express pg cors
express - create server
cors - allows different domains to interact with each other
pg - connect data base with server to run queries
installed body-parser - to help read request body
install nodemon - we don't have to restart/refresh server
 - edit package.json with devStart : nodemon index.js // how you start you development server. In production it should use 'start' ie node index.js. //check package.json
 // connecting dp to server
 configure db in dbconfig
 psql postgres
 psql -f bincom_test.sql inec - run the sql file and perform all operations in the inec database
 asyn for looping and making queries
 https://caolan.github.io/async/v3/docs.html#eachSeries

 out of sync primary key
 select nextval(pg_get_serial_sequence('polling_unit', 'uniqueid'));
 select max(uniqueid) from polling_unit;
 if max is higher than next val pkey sequence is out of sync
 set it right below:
 select SETVAL((select pg_get_serial_sequence('"polling_unit"','uniqueid')),(select (max("uniqueid")+1) from "polling_unit"),false);
 https://www.postgresql.org/docs/8.2/functions-sequence.html

 need to work on error handling
 and how to properly use the asyn library and express js to pass values and chain functions/calls
 https://axios-http.com/docs/api_intro
 https://node-postgres.com/features/queries
 https://caolan.github.io/async/v3/docs.html#waterfall

 Next - 2 and 3
 submit - tomorrow.
 combaack - early morning.

 now - 14th sept.
 sparate into different component.
 Error handling. and spa routing
 deploy 
 - Design by night -  js.cats. checkout dribble